definitions:
  auth.LoginInput:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.BNPL:
    properties:
      branch_id:
        type: string
      created_at:
        type: string
      customer_id:
        type: string
      id:
        type: string
      paid_amount:
        type: integer
      products:
        additionalProperties:
          $ref: '#/definitions/models.SalesSessionItem'
        description: products in the BNPL
        type: object
      status:
        allOf:
        - $ref: '#/definitions/models.BNPLStatus'
        description: active, completed, cancelled
      total_amount:
        type: integer
      transactions:
        description: id of transactions
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  models.BNPLStatus:
    enum:
    - active
    - completed
    - cancelled
    type: string
    x-enum-varnames:
    - BNPLStatusActive
    - BNPLStatusCompleted
    - BNPLStatusCancelled
  models.Branch:
    properties:
      id:
        type: string
      location:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.CloseJournalEntryInput:
    properties:
      cash_left:
        type: integer
      terminal_income:
        type: integer
    type: object
  models.CustomerBase:
    properties:
      additional_info:
        additionalProperties:
          type: string
        type: object
      address:
        description: Email   string `json:"email" bson:"email"`
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.Error:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.InitiatorType:
    enum:
    - salary
    - rent
    - utilities
    - other
    - sale
    - supplier
    - bnpl
    type: string
    x-enum-comments:
      InitiatorTypeBNPL: buy now pay later BNPL transactions
    x-enum-varnames:
    - InitiatorTypeSalary
    - InitiatorTypeRent
    - InitiatorTypeUtilities
    - InitiatorTypeOther
    - InitiatorTypeSales
    - InitiatorTypeSupplier
    - InitiatorTypeBNPL
  models.Journal:
    properties:
      branch:
        $ref: '#/definitions/models.Branch'
      cash_left:
        type: integer
      date:
        type: string
      id:
        type: string
      operations:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
      shift_is_closed:
        type: boolean
      terminal_income:
        type: integer
      total:
        type: integer
    type: object
  models.JournalOperationInput:
    properties:
      amount:
        type: integer
      description:
        type: string
      payment_method:
        $ref: '#/definitions/models.PaymentMethod'
      supplier_id:
        type: string
      supplier_transaction:
        type: boolean
      type:
        $ref: '#/definitions/models.TransactionType'
    type: object
  models.ManufacturerInfo:
    properties:
      address:
        description: Manufacturer address
        type: string
      country:
        description: Country of manufacture
        type: string
      email:
        description: Contact email
        type: string
      name:
        description: Manufacturer name
        type: string
      phone:
        description: Contact phone number
        type: string
    type: object
  models.NewBNPLInput:
    properties:
      branch_id:
        type: string
      calculate_total_amount:
        type: boolean
      customer_id:
        type: string
      products:
        additionalProperties:
          $ref: '#/definitions/models.SalesSessionItem'
        type: object
      total_amount:
        type: integer
    type: object
  models.NewBranchFinanceInput:
    properties:
      branch_name:
        type: string
      details: {}
    type: object
  models.NewJournalEntryInput:
    properties:
      branch_name_or_id:
        type: string
      date:
        type: string
    type: object
  models.Output:
    properties:
      data: {}
      error:
        items:
          $ref: '#/definitions/models.Error'
        type: array
    type: object
  models.PaymentMethod:
    enum:
    - cash
    - bank
    - terminal
    - online_payment
    - cheque
    - online_transfer
    - undefined
    type: string
    x-enum-varnames:
    - PaymentMethodCash
    - PaymentMethodBank
    - PaymentMethodTerminal
    - OnlineMobileAppPayment
    - Cheque
    - OnlineTransfer
    - PaymentMethodUndefined
  models.ProductBase:
    properties:
      category:
        description: Product categories
        items:
          type: string
        type: array
      description:
        description: Product description
        type: string
      manufacturer:
        allOf:
        - $ref: '#/definitions/models.ManufacturerInfo'
        description: Manufacturer details
      minimum_stock_alert:
        description: Minimum stock alert
        type: integer
      name:
        description: Product name
        type: string
      sku:
        description: Stock Keeping Unit
        type: string
    type: object
  models.ProductPlace:
    properties:
      id:
        description: Unique identifier for the place
        type: string
      place_type:
        allOf:
        - $ref: '#/definitions/models.ProductPlaceType'
        description: Type of storage location
    type: object
  models.ProductPlaceType:
    enum:
    - branch
    - warehouse
    type: string
    x-enum-comments:
      ProductPlaceTypeBranch: Store branch location
      ProductPlaceTypeWarehouse: Central warehouse location
    x-enum-varnames:
    - ProductPlaceTypeBranch
    - ProductPlaceTypeWarehouse
  models.SalesSessionItem:
    properties:
      price:
        type: integer
      quantity:
        type: integer
    type: object
  models.SupplierBase:
    properties:
      address:
        type: string
      branch:
        type: string
      email:
        type: string
      inn:
        type: string
      name:
        type: string
      notes:
        type: string
      phone:
        type: string
    type: object
  models.Transaction:
    properties:
      amount:
        type: integer
      branch_id:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: string
      payment_method:
        $ref: '#/definitions/models.PaymentMethod'
      type:
        $ref: '#/definitions/models.InitiatorType'
    type: object
  models.TransactionBase:
    properties:
      amount:
        type: integer
      description:
        type: string
      payment_method:
        $ref: '#/definitions/models.PaymentMethod'
      type:
        $ref: '#/definitions/models.TransactionType'
    type: object
  models.TransactionOutput:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
      error:
        items:
          $ref: '#/definitions/models.Error'
        type: array
    type: object
  models.TransactionOutputSingle:
    properties:
      data:
        $ref: '#/definitions/models.Transaction'
      error:
        items:
          $ref: '#/definitions/models.Error'
        type: array
    type: object
  models.TransactionType:
    enum:
    - credit
    - debit
    type: string
    x-enum-comments:
      TransactionTypeCredit: credit means - income - when money is gained or received
        into an account
      TransactionTypeDebit: debit means - outcome - when money is lost, spent, or
        withdrawn from an account
    x-enum-varnames:
    - TransactionTypeCredit
    - TransactionTypeDebit
  models.User:
    properties:
      branch:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  products.NewIncomeInput:
    properties:
      date:
        description: Date of the income
        type: string
      price:
        description: Price of the product that was uploaded
        type: integer
      quantity:
        description: Quantity of the product that was uploaded
        type: integer
      selling_price:
        type: integer
      supplier_id:
        description: Supplier ID
        type: string
      uploaded_to:
        allOf:
        - $ref: '#/definitions/models.ProductPlace'
        description: Place where the product was uploaded to
    type: object
  sales.AddProductItemToSessionInput:
    properties:
      id:
        type: string
      quantity:
        type: integer
    type: object
info:
  contact:
    email: hamidovaslon13@gmail.com
    name: API Support
    url: https://github.com/aslon1213/go-pos-erp
  description: This is a ERP/POS API for Magazin.
  title: Magazin ERP/POS API
  version: "1.0"
paths:
  /api/activities/me:
    get:
      consumes:
      - application/json
      description: Get the 25 most recent activities for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Get activities of current user
      tags:
      - auth
  /api/activities/recent:
    get:
      consumes:
      - application/json
      description: Get the 25 most recent activities across all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Get recent activities
      tags:
      - auth
  /api/auth/me:
    get:
      consumes:
      - application/json
      description: Get user info
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user info
      tags:
      - auth
  /api/bnpl:
    post:
      consumes:
      - application/json
      description: Create a new Buy Now Pay Later transaction
      parameters:
      - description: BNPL input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.NewBNPLInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BNPL'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Create new BNPL
      tags:
      - BNPL
  /api/bnpl/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an existing BNPL transaction
      parameters:
      - description: BNPL ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Delete BNPL
      tags:
      - BNPL
    get:
      consumes:
      - application/json
      description: Get details of a specific BNPL transaction
      parameters:
      - description: BNPL ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BNPL'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get BNPL details
      tags:
      - BNPL
  /api/bnpl/{id}/credit:
    post:
      consumes:
      - application/json
      description: Add a credit payment to an existing BNPL
      parameters:
      - description: BNPL ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment amount
        in: query
        name: amount
        required: true
        type: integer
      - default: cash
        description: Payment method
        in: query
        name: payment_method
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BNPL'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Credit BNPL payment
      tags:
      - BNPL
  /api/customers:
    get:
      consumes:
      - application/json
      description: Get all customers from the database
      parameters:
      - description: Customer name
        in: query
        name: name
        type: string
      - description: Customer phone
        in: query
        name: phone
        type: string
      - description: Customer address
        in: query
        name: address
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of customers per page
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Get all customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create a new customer in the database
      parameters:
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.CustomerBase'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Create a new customer
      tags:
      - customers
  /api/customers/{customer_id}/bnpls:
    get:
      consumes:
      - application/json
      description: Get all BNPL transactions for a specific customer
      parameters:
      - description: Customer ID
        in: path
        name: customer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get customer BNPLs
      tags:
      - BNPL
  /api/customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer from the database
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Delete a customer
      tags:
      - customers
    get:
      consumes:
      - application/json
      description: Get a customer by its ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Get a customer by ID
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Update an existing customer in the database
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.CustomerBase'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Update a customer
      tags:
      - customers
  /api/finance:
    post:
      consumes:
      - application/json
      description: Add new financial records for a branch
      parameters:
      - description: Branch finance input
        in: body
        name: branch
        required: true
        schema:
          $ref: '#/definitions/models.NewBranchFinanceInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Create new finance for a branch
      tags:
      - finance
  /api/finance/branch/id/{id}:
    get:
      description: Retrieve a branch using its ID
      parameters:
      - description: Branch ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Fetch branch by ID
      tags:
      - finance
  /api/finance/branch/name/{branch_name}:
    get:
      description: Retrieve finance details using the branch name
      parameters:
      - description: Branch Name
        in: path
        name: branch_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Fetch finance by branch name
      tags:
      - finance
  /api/finance/branches:
    get:
      description: Retrieve all branches from the finance collection
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Fetch all branches
      tags:
      - finance
  /api/finance/id/{id}:
    get:
      description: Retrieve finance details using its ID --- ObjectID not branch_id
      parameters:
      - description: Finance ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Fetch finance by ID
      tags:
      - finance
  /api/journals:
    post:
      consumes:
      - application/json
      description: Create a new journal entry for a branch
      parameters:
      - description: New Journal Entry Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.NewJournalEntryInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Journal'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Create a new journal entry
      tags:
      - journals
  /api/journals/{journal_id}:
    get:
      consumes:
      - application/json
      description: Get a journal entry by its ID
      parameters:
      - description: Journal ID
        in: path
        name: journal_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Journal'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get a journal entry by ID
      tags:
      - journals
  /api/journals/{journal_id}/close:
    post:
      consumes:
      - application/json
      description: Close a journal entry by updating its transactions
      parameters:
      - description: Journal ID
        in: path
        name: journal_id
        required: true
        type: string
      - description: Close Journal Entry Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CloseJournalEntryInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Close a journal entry
      tags:
      - journals
  /api/journals/{journal_id}/operations:
    post:
      consumes:
      - application/json
      description: Create a new transaction and update the journal
      parameters:
      - description: Transaction data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.JournalOperationInput'
      - description: Journal ID
        in: path
        name: journal_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Create a new operation transaction
      tags:
      - journals/operations
  /api/journals/{journal_id}/operations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an operation transaction by ID
      parameters:
      - description: Operation ID
        in: path
        name: id
        required: true
        type: string
      - description: Journal ID
        in: path
        name: journal_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Delete an operation transaction
      tags:
      - journals/operations
    get:
      consumes:
      - application/json
      description: Get an operation transaction by ID
      parameters:
      - description: Operation ID
        in: path
        name: id
        required: true
        type: string
      - description: Journal ID
        in: path
        name: journal_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Get an operation transaction by ID
      tags:
      - journals/operations
    put:
      consumes:
      - application/json
      description: Update an operation transaction by ID
      parameters:
      - description: Operation ID
        in: path
        name: id
        required: true
        type: string
      - description: Journal ID
        in: path
        name: journal_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Update an operation transaction
      tags:
      - journals/operations
  /api/journals/{journal_id}/reopen:
    post:
      consumes:
      - application/json
      description: Reopen a journal entry by removing its closing transactions
      parameters:
      - description: Journal ID
        in: path
        name: journal_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Reopen a closed journal entry
      tags:
      - journals
  /api/journals/branch/{branch_id}:
    get:
      consumes:
      - application/json
      description: Query journal entries by branch ID
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Journal'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Query journal entries
      tags:
      - journals
  /api/journals/report:
    get:
      consumes:
      - application/json
      description: Get a report of journal entries
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get a report
      tags:
      - journals
  /api/products:
    get:
      consumes:
      - application/json
      description: Query products based on various parameters
      parameters:
      - description: Branch ID
        in: query
        name: branch_id
        type: string
      - description: SKU
        in: query
        name: sku
        type: string
      - description: Minimum price
        in: query
        name: price_min
        type: number
      - description: Maximum price
        in: query
        name: price_max
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Query products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a new product with the given details
      parameters:
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductBase'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - products
  /api/products/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a product and its related data
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Retrieves a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Updates an existing product with the given details
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product details to update
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductBase'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Edit a product
      tags:
      - products
  /api/products/{id}/income:
    post:
      consumes:
      - application/json
      description: Adds new income entry for a product with quantity and price updates
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Income details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/products.NewIncomeInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Add new income for a product
      tags:
      - products
  /api/products/{product_id}/images:
    get:
      description: Returns a list of image URLs for a given product
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all images of a product
      tags:
      - products
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image file for a product and stores it in S3
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Upload a product image
      tags:
      - products
  /api/products/{product_id}/images/{key}:
    delete:
      description: Deletes a product image from S3 and removes reference from database
      parameters:
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: Image key to delete
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a product image
      tags:
      - products
  /api/products/images/{key}:
    get:
      description: Returns the image file for a given image key
      parameters:
      - description: Image key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a single product image
      tags:
      - products
  /api/products/transfer:
    post:
      consumes:
      - application/json
      description: Transfers product quantity from one location to another
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Transfer product between locations
      tags:
      - products
  /api/sales/session/{session_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a sales session by ID
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Delete a sales session
      tags:
      - sales/session
    get:
      consumes:
      - application/json
      description: Retrieves details of a specific sales session
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Get a sales session by ID
      tags:
      - sales/session
  /api/sales/session/{session_id}/close:
    post:
      consumes:
      - application/json
      description: Closes an existing sales session and processes the transaction
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Close a sales session
      tags:
      - sales/session
  /api/sales/session/{session_id}/product:
    post:
      consumes:
      - application/json
      description: Adds a product item to an existing sales session
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      - description: Product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/sales.AddProductItemToSessionInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Add product to sales session
      tags:
      - sales/session
  /api/sales/session/branch/{branch_id}:
    get:
      consumes:
      - application/json
      description: Retrieves all sales sessions associated with a branch
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Get all sales sessions for a branch
      tags:
      - sales/session
    post:
      consumes:
      - application/json
      description: Creates a new sales session for a branch
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Open a new sales session
      tags:
      - sales/session
  /api/sales/transactions/{branch_id}:
    post:
      consumes:
      - application/json
      description: Create a new sales transaction for a branch
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      - description: Transaction details
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.TransactionBase'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Create a new sales transaction
      tags:
      - sales/transactions
  /api/sales/transactions/{transaction_id}:
    delete:
      consumes:
      - application/json
      description: Delete a sales transaction by ID
      parameters:
      - description: Transaction ID
        in: path
        name: transaction_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Delete a sales transaction
      tags:
      - sales/transactions
  /api/suppliers:
    get:
      consumes:
      - application/json
      description: Get all suppliers from the database
      parameters:
      - description: Supplier name
        in: query
        name: name
        type: string
      - description: Supplier INN
        in: query
        name: inn
        type: string
      - description: Supplier branch
        in: query
        name: branch
        type: string
      - description: Supplier email
        in: query
        name: email
        type: string
      - description: Supplier phone
        in: query
        name: phone
        type: string
      - description: Supplier address
        in: query
        name: address
        type: string
      - description: Supplier notes
        in: query
        name: notes
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Get all suppliers
      tags:
      - suppliers
    post:
      consumes:
      - application/json
      description: Create a new supplier in the database
      parameters:
      - description: Supplier data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/models.SupplierBase'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Create a new supplier
      tags:
      - suppliers
  /api/suppliers/{branch_id}/{supplier_id}/transactions:
    post:
      consumes:
      - application/json
      description: Create a new transaction for a supplier and update financial records
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      - description: Supplier ID
        in: path
        name: supplier_id
        required: true
        type: string
      - description: Transaction data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/models.TransactionBase'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Create a new transaction for a supplier
      tags:
      - suppliers
      - transactions
  /api/suppliers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a supplier from the database
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Delete a supplier
      tags:
      - suppliers
    get:
      consumes:
      - application/json
      description: Get a supplier by its ID
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Get a supplier by ID
      tags:
      - suppliers
    put:
      consumes:
      - application/json
      description: Update a supplier's information
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: string
      - description: Supplier data
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/models.SupplierBase'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Output'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Output'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Output'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Output'
      security:
      - BearerAuth: []
      summary: Update a supplier
      tags:
      - suppliers
  /api/transactions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a transaction from the database by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message" : "transaction was succesfully deleted'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Delete a transaction by ID
      tags:
      - transactions
    put:
      consumes:
      - application/json
      description: Update transaction details by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      - description: Transaction amount
        in: query
        name: amount
        type: string
      - description: Transaction description
        in: query
        name: description
        type: string
      - description: Type of transaction
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message" : "transaction was succesfully updated'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Update a transaction by ID
      tags:
      - transactions
  /api/transactions/{transaction_id}:
    get:
      consumes:
      - application/json
      description: Retrieve a single transaction by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: transaction_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TransactionOutputSingle'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get a transaction by ID
      tags:
      - transactions
  /api/transactions/branch/{branch_id}:
    get:
      consumes:
      - application/json
      description: Retrieve transactions based on various query parameters
      parameters:
      - description: Branch ID
        in: path
        name: branch_id
        required: true
        type: string
      - description: Transaction description
        in: query
        name: description
        type: string
      - description: Minimum transaction amount
        in: query
        name: amount_min
        type: integer
      - description: Maximum transaction amount
        in: query
        name: amount_max
        type: integer
      - description: Payment method
        in: query
        name: payment_method
        type: string
      - description: Type of transaction
        in: query
        name: type_of_transaction
        type: string
      - description: Initiator type
        in: query
        name: initiator_type
        type: string
      - description: Minimum date
        in: query
        name: date_min
        type: string
      - description: Maximum date
        in: query
        name: date_max
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of transactions per page
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TransactionOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Error'
      security:
      - BearerAuth: []
      summary: Get transactions by query parameters
      tags:
      - transactions
  /api/transactions/docs/initiator_type:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all possible initiator types for transactions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InitiatorType'
            type: array
      security:
      - BearerAuth: []
      summary: Get all initiator types
      tags:
      - transactions
  /api/transactions/docs/payment_method:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all possible payment methods
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PaymentMethod'
            type: array
      security:
      - BearerAuth: []
      summary: Get all payment methods
      tags:
      - transactions
  /api/transactions/docs/type:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all possible transaction types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TransactionType'
            type: array
      security:
      - BearerAuth: []
      summary: Get all transaction types
      tags:
      - transactions
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Register a new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
